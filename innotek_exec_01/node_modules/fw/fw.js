/*
Description			: use a module for calling other application.
Default value		: 0
The scope of value	:
First used			:
*/
var spawn = require('child_process').spawn;

/*
Description			: use 'eventss'.
Default value		: /
The scope of value	:
First used			:
*/
var events = require('events');

/*
Description			: get a event object.
Default value		: /
The scope of value	:
First used			:
*/
var event = new events.EventEmitter();

/*
Description			: handle timeout object, to stop clear setInterval().
Default value		: /
The scope of value	:
First used			:
*/
var timeoutObj;

/*
Description			: 0 - no download task, 1 - downloading.
Default value		: 0
The scope of value	:
First used			:
*/
var downloadStatus = 0; 

/*
Description			: bash shell directory
Default value		: /
The scope of value	:
First used			:
*/
var BASE_PATH = './node_modules/fw/'

/***********************************************************************
**Function Name	: downloadFw
**Description	: download fw from server.
**Parameters	: resourcePath {String} - download path.
**Return		: none.
***********************************************************************/
function downloadFw(resourcePath)
{
	var getSrc = spawn('/bin/bash', [BASE_PATH+'GET_SRC', resourcePath]);

	downloadStatus = 1;
	
	console.log("downloading.....");
	
	timeoutObj = setTimeout(checkNetworkStatus, 5000);
	
	getSrc.once('close', function(code){
		
		if (0 === code)
		{
			console.log("download ok!");
						
			event.emit("download_end");
		}
		else
		{
			console.log("download failed!");
					
			event.emit("download_error", code);
		}
		
		downloadStatus = 0;	
	});
}

/***********************************************************************
**Function Name	: checkNetworkStatus
**Description	: check network status, the packet loss is so bigger,
				: we will stop downloading.
**Parameters	: none.
**Return		: none.
***********************************************************************/
function checkNetworkStatus()
{
	if (1 === getDownloadStatus())
	{
		var checkNet = spawn('/bin/bash', [BASE_PATH + 'CHECK_NET']);
		var isStopDownload = 0;
		
		checkNet.stdout.once('data', function(data){
		
			console.log("Network status code:" + data[0]);
			
			if (49 === data[0])
			{
				isStopDownload = 1;
			}
		});
		
		checkNet.once('close', function(code){
			
			if (1 === isStopDownload)
			{
				var kill = spawn('/bin/bash', [BASE_PATH + 'KILL']);
				
				console.log("network is bad, stop downloading");
				
				kill.once('close', function(code){
					
					console.log("stoped downloading");	
									
					clearTimeout(timeoutObj);
					
					downloadStatus = 0;
					
					event.emit("download_error", code);
				});				
			}
			
			timeoutObj = setTimeout(checkNetworkStatus, 5000);
		});
	}
	else
	{
		console.log('stop check network');
		clearTimeout(timeoutObj);
		downloadStatus = 0;
	}
}

/***********************************************************************
**Function Name	: getDownloadStatus
**Description	: get the current download status.
**Parameters	: none.
**Return		: the current download status.
***********************************************************************/
function getDownloadStatus()
{
	return downloadStatus;
}

exports.downloadFw = downloadFw;
exports.getDownloadStatus = getDownloadStatus;
exports.Event = event;






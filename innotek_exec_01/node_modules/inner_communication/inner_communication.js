/*
Description			: communication ip.
Default value		: /
The scope of value	: /
First used			: /
*/
var INNER_IP = '127.0.0.1';

/*
Description			: communication port .
Default value		: 0
The scope of value	: /
First used			: /
*/
var INNER_PORT = 0;

/*
Description			: use 'eventss'.
Default value		: /
The scope of value	:
First used			:
*/
var events = require('events');

/*
Description			: get a event object.
Default value		: /
The scope of value	:
First used			:
*/
var event = new events.EventEmitter();

/*
Description			: use 'net' module
Default value		: /
The scope of value	: /
First used			: /
*/
var net = require('net');

/*
Description			: to inner communication
Default value		: /
The scope of value	: /
First used			: /
*/
var clientSocket = new net.Socket();

/***********************************************************************
**Function Name	: initInnerCommunication
**Description	: init inner communication.
**Parameters	: params {Json} - in.
**Return		: none.
***********************************************************************/
function initInnerCommunication(params)
{
	var info = params.cmdInfo;
	
	INNER_PORT = params.port;	
	
	clientSocket.connect(INNER_PORT, INNER_IP, function(){

		console.log("CONNECTED:" + INNER_IP + ":" + INNER_PORT);
		sendCmdInfo(info);
	});	
	
	clientSocket.on('data', function(data){
			
		var json ;
		
		try
		{
			json = JSON.parse(data);		
			console.log("INNER SEV DATA: ",json);
				
		}
		catch(err)
		{
			console.log("InnerCommunication.js:parse json err!");
		}
	});
	
	clientSocket.on('error', function(err){
	
		console.log("ERROR:",err);
		
		event.emit('communication_error');
		
		clientSocket.destroy();
	});
	
	clientSocket.on('close', function(){
		
		console.log("DISCONNECTED:" + INNER_IP + ":" + INNER_PORT);
		
		clientSocket.removeAllListeners();
		
		event.emit('communication_end');
	});	
}

/***********************************************************************
**Function Name	: sendCmdInfo
**Description	: send a cmd information to a child process.
**Parameters	: info {Json} - in.
**Return		: none.
***********************************************************************/
function sendCmdInfo(info)
{
	console.log(JSON.stringify(info));
	
	clientSocket.write(JSON.stringify(info));
}

exports.initInnerCommunication = initInnerCommunication;
exports.Event = event;







